version: "0.2"

env:
  variables:
    IMAGE_REPO_NAME: "health-compass-backend"
    ECS_CLUSTER: "health-compass"
    ECS_SERVICE: "health-compass-task-service"
    TASK_DEF_FAMILY: "health-compass-task"
    CONTAINER_NAME: "health-compass-dev"
    AWS_ACCOUNT_ID: "897399301560"
    AWS_DEFAULT_REGION: "us-east-1"
  exported-variables:
    - IMAGE_TAG
    - IMAGE_URI

phases:
  install:
    commands:
      - set -euo pipefail
      - echo "‚úÖ Docker is pre-installed in CodeBuild environment."

  pre_build:
    commands:
      - echo "üîç Detecting branch..."
      - echo "üîç CODEBUILD_WEBHOOK_HEAD_REF=${CODEBUILD_WEBHOOK_HEAD_REF:-<not set>}"
      - |
        BRANCH_REF="${BRANCH_NAME_OVERRIDE:-${CODEBUILD_WEBHOOK_HEAD_REF:-${CODEBUILD_SOURCE_VERSION:-}}}"
        if [ -z "$BRANCH_REF" ]; then
          echo "‚ùå Unable to determine branch. Set BRANCH_NAME_OVERRIDE or ensure webhook/source version provides a ref."
          exit 1
        fi
        BRANCH_NAME="${BRANCH_REF#refs/heads/}"
        echo "üìå Branch: $BRANCH_NAME"



        if [ "$BRANCH_NAME" = "main" ]; then
          IMAGE_REPO_NAME="health-compass-backend"
          ECS_CLUSTER="health-compass"
          ECS_SERVICE="health-compass-task-service"
          TASK_DEF_FAMILY="health-compass-task"
          CONTAINER_NAME="health-compass-dev"
          TASK_DEF_TEMPLATE="health-compass-task.json"
        elif [ "$BRANCH_NAME" = "deploy/stage" ]; then
          IMAGE_REPO_NAME="health-compass-backend-stage"
          ECS_CLUSTER="health-compass-stage"
          ECS_SERVICE="health-compass-task-stage-service"
          TASK_DEF_FAMILY="health-compass-task-stage"
          CONTAINER_NAME="health-compass-stage"
          TASK_DEF_TEMPLATE="health-compass-task-stage.json"
        else
          echo "‚ùå Unsupported branch: $BRANCH_NAME"
          exit 1
        fi

        echo "üîß IMAGE_REPO_NAME=$IMAGE_REPO_NAME"
        echo "üîß ECS_CLUSTER=$ECS_CLUSTER"
        echo "üîß ECS_SERVICE=$ECS_SERVICE"
        echo "üîß TASK_DEF_FAMILY=$TASK_DEF_FAMILY"
        echo "üîß CONTAINER_NAME=$CONTAINER_NAME"
        echo "üîß TASK_DEF_TEMPLATE=$TASK_DEF_TEMPLATE"

        if [ -z "${IMAGE_TAG:-}" ]; then
          SHORT_SHA="$(echo "${CODEBUILD_RESOLVED_SOURCE_VERSION:-manual}" | cut -c1-7)"
          IMAGE_TAG="${SHORT_SHA}-$(date +%Y%m%d%H%M%S)"
        fi
        echo "üîß IMAGE_TAG=$IMAGE_TAG"

        export IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG"
        echo "üîß IMAGE_URI=$IMAGE_URI"

      - echo "üîê Logging into Amazon ECR..."
      - aws ecr get-login-password --region "$AWS_DEFAULT_REGION" | docker login --username AWS --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com"

  build:
    commands:
      - echo "üê≥ Building Docker image..."
      - docker build -t "$CONTAINER_NAME:$IMAGE_TAG" .
      - echo "üè∑Ô∏è  Tagging image as $IMAGE_URI"
      - docker tag "$CONTAINER_NAME:$IMAGE_TAG" "$IMAGE_URI"
      - echo "‚¨ÜÔ∏è  Pushing image to ECR..."
      - docker push "$IMAGE_URI"

  post_build:
    commands:
      - echo "üì¶ Replacing image URI in task definition template..."
      - |
        sed "s|897399301560.dkr.ecr.us-east-1.amazonaws.com/[^:]*:latest|$IMAGE_URI|g" "$TASK_DEF_TEMPLATE" > taskdef.json
      - echo "üìù Registering new ECS task definition..."
      - |
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://taskdef.json \
          --query "taskDefinition.taskDefinitionArn" \
          --output text)
        echo "‚úÖ Registered: $NEW_TASK_DEF_ARN"
      - echo "üöÄ Updating ECS service with new task definition..."
      - |
        aws ecs update-service \
          --cluster "$ECS_CLUSTER" \
          --service "$ECS_SERVICE" \
          --task-definition "$NEW_TASK_DEF_ARN" \
          --force-new-deployment

artifacts:
  base-directory: . # ‚úÖ fixes ‚Äúno base directory‚Äù in CodeBuild/CodePipeline
  files:
    - taskdef.json
